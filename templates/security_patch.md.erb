**General guidelines**

- Be sure to follow the [Security Releases general information](https://gitlab.com/gitlab-org/release/docs/blob/master/general/security/process.md) and [Security Releases as Release Manager](https://gitlab.com/gitlab-org/release/docs/blob/master/general/security/release-manager.md).
- Always work on [GitLab Security](https://gitlab.com/gitlab-org/security/gitlab) and [dev.gitlab.org](https://dev.gitlab.org/). Do not push anything to [GitLab Canonical](https://gitlab.com/gitlab-org/gitlab)
- Deployment tasks (staging, production canary VMs, and production) should be done only if the patch is for the latest version. Feel free to delete those sections if they don't apply.

## Preparation

<% if critical? -%>
- [ ] Merge critical security merge requests using the UI. *Do not merge any targeting `master`.*
<% else -%>
- [ ] Merge security merge requests using ChatOps:
   ```sh
   # In Slack:
   /chatops run release merge --security
   ```
<% end -%>

- [ ] If any merge requests could not be merged, investigate what needs to be done to resolve the issues. Do **not** proceed unless it has been determined safe to do so.

### Auto-Deploy - only for the latest version

The following steps should ideally be completed within one day.

- [ ] Temporarily disable the scheduled auto-deploy tasks via ChatOps:
   ```sh
   # In Slack
   /chatops run auto_deploy pause
   ```
- [ ] Ensure latest auto-deploy branches are synced across Canonical, Security, and Build:
   ```sh
   # In Slack
   /chatops run mirror status
   ```
<% if critical? -%>
- [ ] Merge critical security merge requests using the UI, *including the one targeting `master`.*
<% else -%>
- [ ] Merge security merge requests using ChatOps:
   ```sh
   # In Slack:
   /chatops run release merge --security --master
   ```
<% end -%>
- [ ] Manually cherry pick EACH security fix into the CURRENT auto-deploy branch, both GitLab and Omnibus
   ```sh
   # fetch both remotes
   git fetch origin
   git fetch security

   # sync current auto-deploy branch on security
   git checkout -b CURRENT_AUTO_DEPLOY_BRANCH --track security/CURRENT_AUTO_DEPLOY_BRANCH
   git pull origin CURRENT_AUTO_DEPLOY_BRANCH
   git push security

   # get a list of all the merge commits on security/master not available on origin/master
   git log origin/master..security/master --merges | grep "^commit"

   # cherry-pick each commit on that list in the current auto-deploy branch
   git cherry-pick -m 1 -x COMMIT_ID

   # push to security
   git push security
   ```
- [ ] Trigger an auto-deploy tagging via ChatOps:
   ```sh
   # In Slack
   /chatops run auto_deploy tag --security
   ```

   - This will automatically deploy to staging, if successful this will also create a QA issue
- [ ] Ensure this makes it through to canary

- [ ] After the QA deadline has passed, proceed to push this to production

## Packaging

- [ ] **Push `omnibus-gitlab/<%= version.stable_branch %>` to `dev` only: `git push dev <%= version.stable_branch %>`**
- [ ] Ping the Security Engineers so they can get started with the blog post. The blog post should also be done on https://dev.gitlab.org/ in a **private snippet**: BLOG_POST_SNIPPET

- [ ] Ensure [tests are green in CE] and [green in EE]
   ```sh
   # In Slack:
   /chatops run release status --security
   ```
- [ ] Tag `<%= version.to_patch %>`:
   ```sh
   # In Slack:
   /chatops run release tag --security <%= version.to_patch %>
   ```
- [ ] Check that [EE packages are built] and [CE packages are built]

## Deploy

###  Deploy to Pre for QA testing

Deployment is automatically performed from tagging the auto-deploy branch.

- [ ] Verify that pre.gitlab.com is running the latest patch version
  - Check in Slack `#announcements` channel
  - Go to https://pre.gitlab.com/help

### QA

The [QA task issue](https://gitlab.com/gitlab-org/release/tasks/issues?label_name%5B%5D=QA+task)
is automatically generated, one for the auto-deploy build and another one for the tagged release.

- [ ] Notify `@appsec-team` that packages are ready for QA
  ```sh
  # In Slack
  @appsec-team - Security release packages are available for QA.
  ```
- [ ] Wait for the QA tasks deadline to pass.

## Release

- [ ] This section should be done in coordination with the Security team, so **make sure to confirm with them before proceeding**
  ```sh
  # In Slack
  @appsec-team - We are ready to publish the security release packages for <%= version %>, please let us know if the blog post is ready.
  ```

- [ ] Publish the packages via ChatOps:
  ```
  # In Slack:
  /chatops run publish <%= version %>
  ```
- [ ] Create the `<%= version %>` version on [version.gitlab.com](https://version.gitlab.com/versions/new?version=<%= version %>). **Be sure to mark it as a security release.**
- [ ] In the `#content-updates` channel, share a link to the blog post:
   ```
   :tada: GitLab <%= version %> has been released: BLOG_POST_URL
   ```

### Sync

- [ ] Push `security/gitlab` `master` and `auto-deploy` branches to all remotes.
- [ ] Push `security/gitlab-foss` `master` and `auto-deploy` branches to all remotes.
- [ ] Push `security/omnibus-gitlab` `master` and `auto-deploy` branches to all remotes.
- [ ] Verify all remotes are synced:

   ```sh
   # In Slack
   /chatops run mirror status
   ```

### Auto-Deploy - only for the latest version

- [ ] Re-enable the scheduled auto-deploy tasks via ChatOps:
   ```sh
   # In Slack
   /chatops run auto_deploy unpause
   ```
- [ ] Create a new auto-deploy branch from `master` via ChatOps:
   ```sh
   # In Slack
   /chatops run auto_deploy prepare
   ```

---

For references:
- https://dev.gitlab.org/gitlab/gitlab-ee/commits/<%= version.stable_branch(ee: true) %>
- https://dev.gitlab.org/gitlab/gitlabhq/commits/<%= version.stable_branch %>
- https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.stable_branch %>

[tests are green in CE]: https://dev.gitlab.org/gitlab/gitlabhq/commits/<%= version.stable_branch %>
[green in EE]: https://dev.gitlab.org/gitlab/gitlab-ee/commits/<%= version.stable_branch(ee: true) %>

[EE packages are built]: https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(ee: true) %>
[CE packages are built]: https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus %>

[`gitlab/gitlab-ee`]: https://packages.gitlab.com/gitlab/gitlab-ee
[`gitlab/gitlab-ce`]: https://packages.gitlab.com/gitlab/gitlab-ce

[`security_qa_issue` task]: https://gitlab.com/gitlab-org/release-tools/blob/master/doc%2Frake-tasks.md#security_qa_issuefromtoversion

[pipeline schedules]: https://gitlab.com/gitlab-org/release-tools/pipeline_schedules
