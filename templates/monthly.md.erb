## First steps

- [ ] Create a new slack channel `<%= Slack::Channel.for(version) %>`
- [ ] Set the channel topic to `RMs: https://about.gitlab.com/release-managers`
- [ ] Invite all current release managers
- [ ] Inside the old release slack channel, notify about `<%= Slack::Channel.for(version) %>`

     ```
     Hello :wave:
     We are starting <%= version.to_minor %> into <%= Slack::Channel.for(version) %>
     Please archive this channel and join <%= Slack::Channel.for(version) %> if interested
     ```
- [ ] Determine latest day of the month where we'd create the stable branch: __________________
  - This will be known as the [freeze date]

## Monitor

- [Monitor QA issues for each deploy to `gstg`](https://gitlab.com/gitlab-org/release/tasks/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=QA%20task)
- Ensure any deploys that do not make it to canary are investigated
- Try to push any successful deploy to canary into production after some time has passed, preferrably after all QA tasks are accounted and checked
- Monitor for any blockers to production and determine if canary should be disabled

## Release Candidate

- Follow instructions in the release candidate issue on the aforementioned [freeze date]

Keep in mind that:

1. After the [freeze date] only regression, security, and documentation fixes should be
   cherry-picked into stable branches.
2. The final RC should point to the same commit as the final release.

### At 15:00 UTC

If the final RC isn't tagged and deployed by this time, notify the
[Distribution Lead][getting help].

### At 20:00 UTC

If the final RC still isn't tagged and deployed by this time, notify the
[VP of Engineering][getting help].

## 22nd: release day

No new code can be added to the release that was not included in the final RC.

- At 08:00 UTC, final release is ready for tagging (Including changes at this stage requires signoff from the [VP of Engineering][getting help]):
  - [ ] Ensure tests are green on [CE stable branch]
  - [ ] Ensure tests are green on [EE stable branch]
  - [ ] Ensure tests are green on [Omnibus CE stable branch]
  - [ ] Ensure tests are green on [Omnibus EE stable branch]
  - [ ] Ensure master and stable branches are synced

- Before 10:00 UTC:
  - [ ] Tag `<%= version.to_patch %>`:
    ```sh
    # In Slack:
    /chatops run release tag <%= version.to_patch %>
    ```
  - [ ] Check progress of [EE packages build](https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(ee: true) %>) and [CE packages build](https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(ee: false) %>)
- Before 12:00 UTC:
  - [ ] Ensure that `<%= version.to_patch %>` is deployed to the preprod environment - https://pre.gitlab.com/help
    - If not, deploy manually with the following ChatOps command:
      ```sh
      # In Slack:
      /chatops run deploy <%= version.to_patch %>-ee.0 --pre
      ```

- At 13:30 UTC:
  - [ ] Publish the packages via ChatOps:
    ```
    # In Slack:
    /chatops run publish <%= version.to_patch %>
    ```
  - Make sure that neither packages nor the blog post get published earlier than
  planned without approval by the [messaging lead](https://about.gitlab.com/handbook/marketing/blog/release-posts/managers/)
  of the release post. Mind that you don't need their approval if you're on time
  - If anything goes wrong and the release is delayed, ping the
  [release post manager](https://about.gitlab.com/handbook/marketing/blog/release-posts/managers/)
  on Slack to make them aware of the issue. Cross-post the slack message to the #marketing channel to notify them too
- At 14:10 UTC:
  - [ ] Verify that packages appear on `packages.gitlab.com`: [EE](https://packages.gitlab.com/app/gitlab/gitlab-ee/search?q=<%= version.to_patch %>) / [CE](https://packages.gitlab.com/app/gitlab/gitlab-ce/search?q=<%= version.to_patch %>)
  - [ ] Verify that Docker images appear on `hub.docker.com`: [EE](https://hub.docker.com/r/gitlab/gitlab-ee/tags) / [CE](https://hub.docker.com/r/gitlab/gitlab-ce/tags)
  - [ ] Create the `<%= version.to_patch %>` version on [version.gitlab.com](https://version.gitlab.com/versions/new?version=<%= version.to_patch %>)
  - [ ] Once all packages are available publicly and GitLab.com is up and running on the release version,
  ping the [release post manager](https://about.gitlab.com/handbook/marketing/blog/release-posts/managers/)
  on Slack ([#release-post channel]) to give them a go to merge the release post at ~14:20 UTC, so that it will be live at 15:00 UTC

[CE stable branch]: https://gitlab.com/gitlab-org/gitlab-ce/commits/<%= version.stable_branch %>
[EE stable branch]: https://gitlab.com/gitlab-org/gitlab-ee/commits/<%= version.stable_branch(ee: true) %>
[Omnibus CE stable branch]: https://gitlab.com/gitlab-org/omnibus-gitlab/commits/<%= version.stable_branch %>
[Omnibus EE stable branch]: https://gitlab.com/gitlab-org/omnibus-gitlab/commits/<%= version.stable_branch(ee: true) %>
[Deploy]: https://gitlab.com/gitlab-org/takeoff#deploying-gitlab
[staging.gitlab.com]: https://staging.gitlab.com/
[getting help]: https://gitlab.com/gitlab-org/release/docs/blob/master/general/monthly.md#getting-help
[freeze date]: https://gitlab.com/gitlab-org/release/docs/blob/master/general/faq.md#feature-freeze-date
[#release-post channel]: https://gitlab.slack.com/messages/C3TRESYPJ

/milestone %"<%= version.to_minor %>"
