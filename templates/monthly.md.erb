## First steps

- [ ] Join the slack channel `#f_upcoming_release`
- [ ] Change the channel topic with `/topic Issue: <link_to_this_issue>`
- [ ] Invite all current release managers

## Monitor

- [Monitor QA issues for each deploy to `gstg`](https://gitlab.com/gitlab-org/release/tasks/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=QA%20task)
- Ensure any deploys that do not make it to canary are investigated
- Try to push any successful deploy to canary into production after some time has passed, preferably after all QA tasks are accounted and checked
- Monitor for any blockers to production and determine if canary should be disabled

## 17th

If this date is on a weekend, do this work on the next working day

- [ ] [Find the latest `sha`](https://gitlab.com/gitlab-org/release/docs/blob/master/general/deploy/auto-deploy.md#auto-deploy-status) that made it into production successfully: `sha`
- [ ] Notify Engineering Managers that this is the `sha` that is guaranteed to be released on the 22nd, in `#releases`:
    ```
    :mega: This is the latest commit running on GitLab.com and this is guaranteed to be released on the 22nd.
    https://gitlab.com/gitlab-org/gitlab/commits/SHA
    Another auto-deploy branch for the release will be created on the 18th (pending weekend).
    The inclusion of the auto-deploy branch created on the 18th in the release is subject to the usual caveats (CI green, successfully made it to GitLab.com by 20th)
    ```
- [ ] Link the above message to additional channels: `#development`, `#backend`, and `#frontend`

## 18th

If this date is on a weekend, do this work on the last Friday before the 18th.

- [ ] Proceed to cut a new auto-deploy branch
   ```sh
   # In Slack:
   /chatops run auto_deploy prepare
   ```
- [ ] Ensure this build makes it through into production
- [ ] Grab the `sha` from this new auto-deploy branch and notify Engineering Managers that this is the candidate `sha` for the release, in `#releases`:
    ```
    :mega: This is the _candidate_ commit to be released on the 22nd.
    https://gitlab.com/gitlab-org/gitlab/commits/SHA
    ```
- [ ] Link the above message to additional channels: `#development`, `#backend`, and `#frontend`

## Two working days before the 22nd

If this date is on the weekend, do this work on the last Friday before the 20th.

- [ ] Determine what the last green auto deploy branch is and add it here: `BRANCH`
- [ ] Create the stable branches using chatops by running the following in Slack:
      ```
      /chatops run release stable_branch <%= version.to_patch %>
      ```
- [ ] Verify that the [CE stable branch] contains the right commits
  - There should be at least two commits: the last commit from the previous
    stable branch (usually a version update), and the sync commit created by the
    merge train.
  - The sync commit will have the message "Add latest changes from gitlab-org/gitlab@<%= version.stable_branch(ee: true) %>"

- [ ] Create a RC version to ensure that the final version builds correctly

   ```sh
   # In Slack:
   /chatops run release tag <%= version %>-rc42
   ```
- [ ] Notify Engineering Managers that final candidate has been created in `#releases`:

    ```
    :mega: Barring any show-stopping issues, this is the final commit to be released on the 22nd.
    https://gitlab.com/gitlab-org/gitlab/-/commits/<%= version.stable_branch(ee: true) %>
    ```

## 22nd: release day

No new code can be added to the release that was not included in the final RC.

- At 08:00 UTC, final release is ready for tagging (Including changes at this stage requires signoff from the [VP of Engineering][getting help]):
  - [ ] Ensure tests are green on [CE stable branch]
  - [ ] Ensure tests are green on [EE stable branch]
  - [ ] Ensure tests are green on [Omnibus]
  - [ ] Ensure master and stable branches are synced

- Before 10:00 UTC:
  - [ ] Tag `<%= version.to_patch %>`:
    ```sh
    # In Slack:
    /chatops run release tag <%= version.to_patch %>
    ```
  - [ ] Check progress of [EE packages build](https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(ee: true) %>) and [CE packages build](https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(ee: false) %>)
- At 12:00 UTC:
  - [ ] Post an update about the package building status in `<%= Slack::Channel.for(version) %>`
  - [ ] If `<%= version.to_patch %>` has not been deployed to the [preprod environment](https://pre.gitlab.com/help) already, deploy it manually with the following ChatOps command:
      ```sh
      # In Slack:
      /chatops run deploy <%= version.to_patch %>-ee.0 --pre
      ```
- [ ] At 13:00 UTC, post an update about the package building status in `<%= Slack::Channel.for(version) %>`
- At 13:30 UTC:
  - :warning: **Make sure that neither packages nor the blog post get published earlier than 13:30UTC
    without approval by the
    [messaging lead](https://about.gitlab.com/handbook/marketing/blog/release-posts/managers/)
    of the release post. Mind that you don't need their approval if you're on time** :warning:
  - [ ] Publish the packages via ChatOps:
    ```
    # In Slack:
    /chatops run publish <%= version.to_patch %>
    ```
  - If anything goes wrong and the release is delayed, ping the
  [release post manager](https://about.gitlab.com/handbook/marketing/blog/release-posts/managers/)
  on Slack to make them aware of the issue. Cross-post the slack message to the #marketing channel to notify them too
- At 14:10 UTC:
  - [ ] Verify that packages appear on `packages.gitlab.com`: [EE](https://packages.gitlab.com/app/gitlab/gitlab-ee/search?q=<%= version.to_patch %>) / [CE](https://packages.gitlab.com/app/gitlab/gitlab-ce/search?q=<%= version.to_patch %>)
  - [ ] Verify that Docker images appear on `hub.docker.com`: [EE](https://hub.docker.com/r/gitlab/gitlab-ee/tags) / [CE](https://hub.docker.com/r/gitlab/gitlab-ce/tags)
  - [ ] Create the `<%= version.to_patch %>` version on [version.gitlab.com](https://version.gitlab.com/versions/new?version=<%= version.to_patch %>)
  - [ ] Post an update about the status in `<%= Slack::Channel.for(version) %>`
  - [ ] Once all packages are available publicly and GitLab.com is up and running on the release version,
  ping the [release post manager](https://about.gitlab.com/handbook/marketing/blog/release-posts/managers/)
  on Slack ([#release-post channel]) to give them a go to merge the release post at ~14:20 UTC, so that it will be live at 15:00 UTC
- [ ] Open MR to Bump [VERSION](https://gitlab.com/gitlab-org/gitlab/-/blob/master/VERSION) file to the next version to be released

[CE stable branch]: https://gitlab.com/gitlab-org/gitlab-foss/commits/<%= version.stable_branch %>
[EE stable branch]: https://gitlab.com/gitlab-org/gitlab/commits/<%= version.stable_branch(ee: true) %>
[Omnibus]: https://gitlab.com/gitlab-org/omnibus-gitlab/commits/<%= version.stable_branch %>
[Deploy]: https://gitlab.com/gitlab-org/takeoff#deploying-gitlab
[staging.gitlab.com]: https://staging.gitlab.com/
[getting help]: https://gitlab.com/gitlab-org/release/docs/blob/master/general/monthly.md#getting-help
[#release-post channel]: https://gitlab.slack.com/messages/C3TRESYPJ

/milestone %"<%= version.to_minor %>"
