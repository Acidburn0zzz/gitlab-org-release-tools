## Preparation

- [ ] Create [preparation MRs] for this version and add the links below:
    ```sh
    # In the release-tools project:
    bundle exec rake "patch_merge_request[<%= version %>]"
    ```

  * CE:
  * EE:

- [ ] Cherry-pick changes into preparation MRs following their instructions
- [ ] Ensure the CE preparation MR has been fully merged into the EE counterpart
- [ ] Merge the preparation branches
- [ ] For `omnibus-gitlab` cherry-pick [remaining merge requests] directly into CE stable branch. Then, merge the CE Omnibus stable branch into EE.
- Check the following list of critical issues/MRs which are to be included in `<%= version %>`. Ensure each has made both CE and EE:
  - [ ] REFERENCE_TO_MR_TO_PICK
- [ ] Ensure builds are green on [Omnibus CE stable branch] and [Omnibus EE stable branch]

[preparation MRs]: https://gitlab.com/gitlab-org/release/docs/blob/master/general/picking-into-merge-requests.md
[remaining merge requests]: https://gitlab.com/gitlab-org/omnibus-gitlab/merge_requests?scope=all&utf8=%E2%9C%93&state=merged&label_name[]=Pick%20into%20<%= version.to_minor %>
[Omnibus CE stable branch]: https://gitlab.com/gitlab-org/omnibus-gitlab/commits/<%= version.stable_branch %>
[Omnibus EE stable branch]: https://gitlab.com/gitlab-org/omnibus-gitlab/commits/<%= version.stable_branch(ee: true) %>

## Packaging

- [ ] [Sync stable branches](https://gitlab.com/gitlab-org/release/docs/blob/master/general/push-to-multiple-remotes.md) for CE, EE, and Omnibus to `dev`
- [ ] Check for any problematic migrations in EE, and paste the diff in a snippet: `git diff -M --diff-filter=RA v<PREVIOUS_TAG>-ee..<%= version.stable_branch(ee: true) %> -- db/migrate db/post_migrate ee/db/migrate ee/db/post_migrate` =>
- [ ] Tag the `<%= version %>` version using the [`release` command]:

  ```sh
  # In Slack:
  /chatops run tag <%= version %>
  ```
- [ ] Check progress of [EE packages build](https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(ee: true) %>) and [CE packages build](https://dev.gitlab.org/gitlab/omnibus-gitlab/commits/<%= version.to_omnibus(ee: false) %>)
    - This might take a while (around 80 min).
    - We only need the EE packages to finish to continue with next steps.

[`release` command]: https://gitlab.com/gitlab-org/release-tools/blob/master/doc/chatops.md#tag

## Deploy

Deploys to production require confirmation from a production team member before
proceeding. Use `!oncall prod` in the `#production` channel to find who's on
call and ping someone. Deploys to staging or canary can be done at will, just
mention it in the `#production` channel.

- [ ] Warm up the packages on takeoff by running:

    ```sh
    # In the takeoff project:
    bin/takeoff-deploy -v <%= version %>-ee.0 -w
    ```

### staging.gitlab.com

- [ ] Notify #production that you're about to deploy on **staging**
- [ ] On video call, [deploy] `<%= version %>` to **staging.gitlab.com**

    ```sh
    # In the takeoff project:
    bin/takeoff-deploy -e gstg -v <%= version %>-ee.0
    ```
- [ ] Comment with the output of the migrations from the takeoff script in this issue

#### QA

- [ ] Create a "QA Task" issue using the ChatOps command:
  ```sh
  # In Slack, replacing LAST_DEPLOYED_VERSION with the appropriate value:
  /chatops run qa_issue vLAST_DEPLOYED_VERSION..v<%= version %>
  ```
- [ ] Wait for the QA Task deadline to pass

### canary.gitlab.com
##### Currently there is no Canary on GCP so canary deployment can be skipped.

- [ ] Notify #production that you're about to deploy on **canary**
- [ ] On video call, [deploy] `<%= version %>` to **canary.gitlab.com**

    ```sh
    # In the takeoff project:
    bin/takeoff-deploy -e canary -v <%= version %>.ee.0
    ```

### gitlab.com (production)

- [ ] Get confirmation from a production team member to deploy **production**. If someone besides the oncall confirms, `@mention` the oncall so they are aware.
- [ ] On video call, [deploy] `<%= version %>` to GitLab.com

    ```sh
    # In the takeoff project:
    bin/takeoff-deploy -e gprd -v <%= version %>-ee.0
    ```

[deploy]: https://gitlab.com/gitlab-org/takeoff#deploying-gitlab
[announce the deploy]: https://gitlab.com/gitlab-org/takeoff/blob/master/doc/announce-a-deployment.md

## Release

- [ ] Publish the packages via ChatOps:
  ```
  # In Slack:
  /chatops run publish <%= version %>
  ```
- [ ] Verify that packages appear on [`packages.gitlab.com`](https://packages.gitlab.com/gitlab/unstable)
- [ ] Verify that Docker images appear on `hub.docker.com`: [EE](https://hub.docker.com/r/gitlab/gitlab-ee/tags) / [CE](https://hub.docker.com/r/gitlab/gitlab-ce/tags)
- [ ] Post a [tweet about] the `<%= version %>` release in the `#releases` channel:

    ```
    !tweet "GitLab <%= version %> is available: https://packages.gitlab.com/gitlab/unstable
    This is a release candidate, we'll release <%= version.to_minor %> on the 22nd of this month."
    ```

[tweet about]: https://gitlab.com/gitlab-org/takeoff#announce-that-the-deploy-is-done
