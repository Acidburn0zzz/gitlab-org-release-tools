image: "dev.gitlab.org:5005/gitlab/gitlab-build-images:release-tools"

stages:
  - test
  - deploy
  - automation
  - chatops

cache:
  key: "ruby-24"
  paths:
    - vendor/ruby

# templates -------------------------------------------------------------------

.with-bundle: &with-bundle
  before_script:
    - bundle install --jobs=$(nproc) --retry=3 --path=vendor

# test ------------------------------------------------------------------------

dependency_scanning:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  tags: []
  before_script: []
  cache: {}
  dependencies: []
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]
  except:
    - schedules
    - triggers

rubocop:
  <<: *with-bundle
  stage: test
  except:
    - schedules
    - triggers
  script:
    - bundle exec rubocop

specs:
  <<: *with-bundle
  stage: test
  except:
    - schedules
    - triggers
  retry: 1
  script:
    - cp .env.example .env
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"
    - bundle exec rake
  artifacts:
    paths:
      - coverage/assets
      - coverage/index.html

# deploy ----------------------------------------------------------------------

pages:
  stage: deploy
  script:
    - mkdir -p public/
    - mv coverage/ public/
  dependencies:
    - specs
  artifacts:
    paths:
      - public/
  only:
    - master
  except:
    - schedules
    - triggers

# automation ------------------------------------------------------------------

release-managers:
  <<: *with-bundle
  stage: automation
  script:
    - source scripts/setup_ssh.sh
    - echo "$RELEASE_BOT_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - export GITLAB_API_PRIVATE_TOKEN="$RELEASE_BOT_PRODUCTION_TOKEN"
    - export DEV_API_PRIVATE_TOKEN="$RELEASE_BOT_DEV_TOKEN"
    - bundle exec rake release_managers:sync
  only:
    - schedules

upstream-merge:
  <<: *with-bundle
  stage: automation
  script:
    - source scripts/setup_ssh.sh
    - echo "$AUTO_UPSTREAM_MERGE_BOT_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - git config --global user.email "gitlab-bot@gitlab.com"
    - git config --global user.name "GitLab Bot"
    - bundle exec rake upstream_merge
  only:
    - schedules

# chatops ---------------------------------------------------------------------

chatops:
  <<: *with-bundle
  stage: chatops
  script:
    - source scripts/setup_ssh.sh
    - echo "$RELEASE_BOT_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - git config --global user.email "robert+release-tools@gitlab.com"
    - git config --global user.name "GitLab Release Tools Bot"
    - ./bin/chatops $TASK
  only:
    - triggers
